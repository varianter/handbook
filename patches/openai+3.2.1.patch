diff --git a/node_modules/openai/api.ts b/node_modules/openai/api.ts
index 6dcf8db..88e38f4 100644
--- a/node_modules/openai/api.ts
+++ b/node_modules/openai/api.ts
@@ -1938,7 +1938,11 @@ export const OpenAIApiAxiosParamCreator = function (configuration?: Configuratio
         createChatCompletion: async (createChatCompletionRequest: CreateChatCompletionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
             // verify required parameter 'createChatCompletionRequest' is not null or undefined
             assertParamExists('createChatCompletion', 'createChatCompletionRequest', createChatCompletionRequest)
-            const localVarPath = `/chat/completions`;
+            let localVarPath = `/chat/completions`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createChatCompletionRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/chat/completions?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
@@ -2011,7 +2015,11 @@ export const OpenAIApiAxiosParamCreator = function (configuration?: Configuratio
         createCompletion: async (createCompletionRequest: CreateCompletionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
             // verify required parameter 'createCompletionRequest' is not null or undefined
             assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest)
-            const localVarPath = `/completions`;
+            let localVarPath = `/completions`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createCompletionRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/completions?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
@@ -2083,7 +2091,11 @@ export const OpenAIApiAxiosParamCreator = function (configuration?: Configuratio
         createEmbedding: async (createEmbeddingRequest: CreateEmbeddingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
             // verify required parameter 'createEmbeddingRequest' is not null or undefined
             assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest)
-            const localVarPath = `/embeddings`;
+            let localVarPath = `/embeddings`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createEmbeddingRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/embeddings?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
diff --git a/node_modules/openai/configuration.ts b/node_modules/openai/configuration.ts
index 2a51762..e060d3c 100644
--- a/node_modules/openai/configuration.ts
+++ b/node_modules/openai/configuration.ts
@@ -15,6 +15,12 @@
 
 const packageJson = require("../package.json");
 
+export interface AzureConfigurationParameters {
+    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
+    apiVersion?: string;
+    endpoint?: string;
+    deploymentName?: string;
+}
 export interface ConfigurationParameters {
     apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
     organization?: string;
@@ -83,6 +89,10 @@ export class Configuration {
      * @type {new () => FormData}
      */
     formDataCtor?: new () => any;
+    /**
+     * @memberof Configuration
+     */
+    azure?: AzureConfigurationParameters;
 
     constructor(param: ConfigurationParameters = {}) {
         this.apiKey = param.apiKey;
@@ -93,12 +103,13 @@ export class Configuration {
         this.basePath = param.basePath;
         this.baseOptions = param.baseOptions;
         this.formDataCtor = param.formDataCtor;
+        this.azure = param.azure;
 
         if (!this.baseOptions) {
             this.baseOptions = {};
         }
         this.baseOptions.headers = {
-            'User-Agent': `OpenAI/NodeJS/${packageJson.version}`,
+            'User-Agent': `AzureOpenAI/NodeJS/${packageJson.version}`,
             'Authorization': `Bearer ${this.apiKey}`,
             ...this.baseOptions.headers,
         }
@@ -108,6 +119,15 @@ export class Configuration {
         if (!this.formDataCtor) {
             this.formDataCtor = require("form-data");
         }
+        if (this.azure) {
+            if (!this.azure.apiKey || !this.azure.endpoint) {
+                throw new Error("Azure Configuration requires apiKey, endpoint");
+            }
+            this.apiKey = this.azure.apiKey;
+            this.baseOptions.headers['api-key'] = this.azure.apiKey;
+            this.baseOptions.headers['Authorization'] = '';
+            this.basePath = this.azure.endpoint;
+        }
     }
 
     /**
diff --git a/node_modules/openai/dist/api.js b/node_modules/openai/dist/api.js
index b3a4f17..78efdfc 100644
--- a/node_modules/openai/dist/api.js
+++ b/node_modules/openai/dist/api.js
@@ -124,7 +124,11 @@ exports.OpenAIApiAxiosParamCreator = function (configuration) {
         createChatCompletion: (createChatCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
             // verify required parameter 'createChatCompletionRequest' is not null or undefined
             common_1.assertParamExists('createChatCompletion', 'createChatCompletionRequest', createChatCompletionRequest);
-            const localVarPath = `/chat/completions`;
+            let localVarPath = `/chat/completions`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createChatCompletionRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/chat/completions?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
             let baseOptions;
@@ -185,7 +189,11 @@ exports.OpenAIApiAxiosParamCreator = function (configuration) {
         createCompletion: (createCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
             // verify required parameter 'createCompletionRequest' is not null or undefined
             common_1.assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest);
-            const localVarPath = `/completions`;
+            let localVarPath = `/completions`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createCompletionRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/completions?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
             let baseOptions;
@@ -245,7 +253,11 @@ exports.OpenAIApiAxiosParamCreator = function (configuration) {
         createEmbedding: (createEmbeddingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
             // verify required parameter 'createEmbeddingRequest' is not null or undefined
             common_1.assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest);
-            const localVarPath = `/embeddings`;
+            let localVarPath = `/embeddings`;
+            if (configuration.azure) {
+                let deploymentName = configuration.azure.deploymentName ? configuration.azure.deploymentName : createEmbeddingRequest.model;
+                localVarPath = `/openai/deployments/${deploymentName}/embeddings?api-version=2023-03-15-preview`;
+            }
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
             let baseOptions;
diff --git a/node_modules/openai/dist/configuration.d.ts b/node_modules/openai/dist/configuration.d.ts
index cbe6616..541e8cd 100644
--- a/node_modules/openai/dist/configuration.d.ts
+++ b/node_modules/openai/dist/configuration.d.ts
@@ -9,6 +9,11 @@
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
+export interface AzureConfigurationParameters {
+    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
+    endpoint?: string;
+    deploymentName?: string;
+}
 export interface ConfigurationParameters {
     apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
     organization?: string;
@@ -18,6 +23,7 @@ export interface ConfigurationParameters {
     basePath?: string;
     baseOptions?: any;
     formDataCtor?: new () => any;
+    azure?: AzureConfigurationParameters;
 }
 export declare class Configuration {
     /**
@@ -76,6 +82,10 @@ export declare class Configuration {
      * @type {new () => FormData}
      */
     formDataCtor?: new () => any;
+    /**
+     * @memberof Configuration
+     */
+    azure?: AzureConfigurationParameters;
     constructor(param?: ConfigurationParameters);
     /**
      * Check if the given MIME is a JSON MIME.
diff --git a/node_modules/openai/dist/configuration.js b/node_modules/openai/dist/configuration.js
index 4a9f063..88775f3 100644
--- a/node_modules/openai/dist/configuration.js
+++ b/node_modules/openai/dist/configuration.js
@@ -25,16 +25,26 @@ class Configuration {
         this.basePath = param.basePath;
         this.baseOptions = param.baseOptions;
         this.formDataCtor = param.formDataCtor;
+        this.azure = param.azure;
         if (!this.baseOptions) {
             this.baseOptions = {};
         }
-        this.baseOptions.headers = Object.assign({ 'User-Agent': `OpenAI/NodeJS/${packageJson.version}`, 'Authorization': `Bearer ${this.apiKey}` }, this.baseOptions.headers);
+        this.baseOptions.headers = Object.assign({ 'User-Agent': `AzureOpenAI/NodeJS/${packageJson.version}`, 'Authorization': `Bearer ${this.apiKey}` }, this.baseOptions.headers);
         if (this.organization) {
             this.baseOptions.headers['OpenAI-Organization'] = this.organization;
         }
         if (!this.formDataCtor) {
             this.formDataCtor = require("form-data");
         }
+        if (this.azure) {
+            if (!this.azure.apiKey || !this.azure.endpoint) {
+                throw new Error("Azure Configuration requires apiKey, endpoint");
+            }
+            this.apiKey = this.azure.apiKey;
+            this.baseOptions.headers['api-key'] = this.azure.apiKey;
+            this.baseOptions.headers['Authorization'] = '';
+            this.basePath = this.azure.endpoint;
+        }
     }
     /**
      * Check if the given MIME is a JSON MIME.
